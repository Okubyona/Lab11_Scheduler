
Lab11_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080012a  0080012a  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e41  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071c  00000000  00000000  00001e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005aa  00000000  00000000  00002c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 33       	cpi	r26, 0x3D	; 61
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5e d1       	rcall	.+700    	; 0x380 <main>
  c4:	aa c1       	rjmp	.+852    	; 0x41a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  d8:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <_avr_timer_cntcurr>
  dc:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <_avr_timer_cntcurr+0x1>
  e0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr+0x2>
  e4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_avr_timer_cntcurr>
 11e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <_avr_timer_cntcurr+0x1>
 122:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <_avr_timer_cntcurr+0x2>
 126:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_avr_timer_cntcurr>
 148:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_avr_timer_cntcurr+0x2>
 150:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_avr_timer_cntcurr>
 15e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <_avr_timer_cntcurr+0x1>
 162:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <_avr_timer_cntcurr+0x2>
 166:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <TimerFlag>
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 188:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_avr_timer_cntcurr>
 18c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <_avr_timer_cntcurr+0x1>
 190:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <_avr_timer_cntcurr+0x2>
 194:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <LCD_init>:
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 df       	rcall	.-84     	; 0x1aa <delay_ms>
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteCommand>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	e5 df       	rcall	.-54     	; 0x1d0 <LCD_WriteCommand>
 206:	8f e0       	ldi	r24, 0x0F	; 15
 208:	e3 df       	rcall	.-58     	; 0x1d0 <LCD_WriteCommand>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	e1 df       	rcall	.-62     	; 0x1d0 <LCD_WriteCommand>
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cb cf       	rjmp	.-106    	; 0x1aa <delay_ms>
 214:	08 95       	ret

00000216 <LCD_WriteData>:
 216:	5e 9a       	sbi	0x0b, 6	; 11
 218:	88 b9       	out	0x08, r24	; 8
 21a:	5f 9a       	sbi	0x0b, 7	; 11
 21c:	00 00       	nop
 21e:	5f 98       	cbi	0x0b, 7	; 11
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	c2 cf       	rjmp	.-124    	; 0x1aa <delay_ms>
 226:	08 95       	ret

00000228 <displayMessage>:

	return state;
}*/


int displayMessage(int state) {
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	a6 97       	sbiw	r28, 0x26	; 38
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	char message[] = "CS120B is Legend... wait for it DARY!";
 248:	26 e2       	ldi	r18, 0x26	; 38
 24a:	e4 e0       	ldi	r30, 0x04	; 4
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	de 01       	movw	r26, r28
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	2a 95       	dec	r18
 258:	e1 f7       	brne	.-8      	; 0x252 <displayMessage+0x2a>
	static unsigned char cursor, startStr, stopStr;

	switch (state) {
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	21 f0       	breq	.+8      	; 0x266 <displayMessage+0x3e>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 05       	cpc	r25, r1
 262:	51 f0       	breq	.+20     	; 0x278 <displayMessage+0x50>
 264:	1d c0       	rjmp	.+58     	; 0x2a0 <displayMessage+0x78>
		case init:
			state = cycle;
			cursor = 16;
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <cursor.2052>
			startStr = 0;
 26c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <startStr.2053>
			stopStr = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 276:	18 c0       	rjmp	.+48     	; 0x2a8 <displayMessage+0x80>
			break;

		case cycle:
			state = (startStr == strlen(message)) ? init: cycle;
 278:	de 01       	movw	r26, r28
 27a:	11 96       	adiw	r26, 0x01	; 1
 27c:	fd 01       	movw	r30, r26
 27e:	01 90       	ld	r0, Z+
 280:	00 20       	and	r0, r0
 282:	e9 f7       	brne	.-6      	; 0x27e <displayMessage+0x56>
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	ea 1b       	sub	r30, r26
 288:	fb 0b       	sbc	r31, r27
 28a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <startStr.2053>
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	31 e0       	ldi	r19, 0x01	; 1
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	8e 17       	cp	r24, r30
 296:	9f 07       	cpc	r25, r31
 298:	09 f4       	brne	.+2      	; 0x29c <displayMessage+0x74>
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	83 2f       	mov	r24, r19
 29e:	92 2f       	mov	r25, r18
			break;
	}

	switch (state) {
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	91 05       	cpc	r25, r1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <displayMessage+0x80>
 2a6:	5d c0       	rjmp	.+186    	; 0x362 <displayMessage+0x13a>
		case init:
			break;

		case cycle:
			LCD_ClearScreen();
 2a8:	9c df       	rcall	.-200    	; 0x1e2 <LCD_ClearScreen>

			LCD_Cursor(cursor);
 2aa:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <cursor.2052>
 2ae:	8c 2d       	mov	r24, r12
 2b0:	9b df       	rcall	.-202    	; 0x1e8 <LCD_Cursor>
			LCD_Cursor(cursor);
 2b2:	8c 2d       	mov	r24, r12
 2b4:	99 df       	rcall	.-206    	; 0x1e8 <LCD_Cursor>
 2b6:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <startStr.2053>
			for (unsigned char i = startStr; i < stopStr; ++i) {
 2ba:	00 91 2a 01 	lds	r16, 0x012A	; 0x80012a <__data_end>
 2be:	d0 16       	cp	r13, r16
 2c0:	c0 f4       	brcc	.+48     	; 0x2f2 <displayMessage+0xca>
 2c2:	1d 2d       	mov	r17, r13
 2c4:	ce 01       	movw	r24, r28
				if (i < strlen(message)) {
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	7c 01       	movw	r14, r24
 2ca:	f7 01       	movw	r30, r14
 2cc:	01 90       	ld	r0, Z+
 2ce:	00 20       	and	r0, r0
 2d0:	e9 f7       	brne	.-6      	; 0x2cc <displayMessage+0xa4>
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	ee 19       	sub	r30, r14
 2d6:	ff 09       	sbc	r31, r15
 2d8:	81 2f       	mov	r24, r17
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	8e 17       	cp	r24, r30
 2de:	9f 07       	cpc	r25, r31
 2e0:	28 f4       	brcc	.+10     	; 0x2ec <displayMessage+0xc4>
 2e2:	f7 01       	movw	r30, r14
					LCD_WriteData(message[i]);
 2e4:	e1 0f       	add	r30, r17
 2e6:	f1 1d       	adc	r31, r1
 2e8:	80 81       	ld	r24, Z
 2ea:	95 df       	rcall	.-214    	; 0x216 <LCD_WriteData>
 2ec:	1f 5f       	subi	r17, 0xFF	; 255
		case cycle:
			LCD_ClearScreen();

			LCD_Cursor(cursor);
			LCD_Cursor(cursor);
			for (unsigned char i = startStr; i < stopStr; ++i) {
 2ee:	10 17       	cp	r17, r16
 2f0:	60 f3       	brcs	.-40     	; 0x2ca <displayMessage+0xa2>
 2f2:	91 e0       	ldi	r25, 0x01	; 1
				if (i < strlen(message)) {
					LCD_WriteData(message[i]);
				}
			}

			if(cursor > 1 && startStr == 0) {
 2f4:	9c 15       	cp	r25, r12
 2f6:	58 f4       	brcc	.+22     	; 0x30e <displayMessage+0xe6>
 2f8:	d1 10       	cpse	r13, r1
 2fa:	09 c0       	rjmp	.+18     	; 0x30e <displayMessage+0xe6>
 2fc:	0f 5f       	subi	r16, 0xFF	; 255
				++stopStr;
 2fe:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <__data_end>
 302:	ca 94       	dec	r12
				--cursor;
 304:	c0 92 2c 01 	sts	0x012C, r12	; 0x80012c <cursor.2052>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2a c0       	rjmp	.+84     	; 0x362 <displayMessage+0x13a>
 30e:	d0 12       	cpse	r13, r16
			}
			else if (startStr == stopStr) {
 310:	0a c0       	rjmp	.+20     	; 0x326 <displayMessage+0xfe>
 312:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
				startStr = stopStr = 0;
 316:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <startStr.2053>
 31a:	80 e1       	ldi	r24, 0x10	; 16
				cursor = SCREEN_WIDTH;
 31c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <cursor.2052>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	1e c0       	rjmp	.+60     	; 0x362 <displayMessage+0x13a>
 326:	de 01       	movw	r26, r28
			}
			else if (stopStr == strlen(message) && cursor == 0) {
 328:	11 96       	adiw	r26, 0x01	; 1
 32a:	fd 01       	movw	r30, r26
 32c:	01 90       	ld	r0, Z+
 32e:	00 20       	and	r0, r0
 330:	e9 f7       	brne	.-6      	; 0x32c <displayMessage+0x104>
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	ea 1b       	sub	r30, r26
 336:	fb 0b       	sbc	r31, r27
 338:	80 2f       	mov	r24, r16
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	8e 17       	cp	r24, r30
 33e:	9f 07       	cpc	r25, r31
 340:	41 f4       	brne	.+16     	; 0x352 <displayMessage+0x12a>
 342:	c1 10       	cpse	r12, r1
 344:	06 c0       	rjmp	.+12     	; 0x352 <displayMessage+0x12a>
 346:	d3 94       	inc	r13
				++startStr;
 348:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <startStr.2053>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 c0       	rjmp	.+16     	; 0x362 <displayMessage+0x13a>
 352:	d3 94       	inc	r13
			}
			else {
				++startStr;
 354:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <startStr.2053>
 358:	0f 5f       	subi	r16, 0xFF	; 255
				++stopStr;
 35a:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <__data_end>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	a6 96       	adiw	r28, 0x26	; 38
			}
			break;
	}
	return state;
}
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	08 95       	ret

00000380 <main>:
 380:	8f ef       	ldi	r24, 0xFF	; 255
int displayMessage( int state);

#define SCREEN_WIDTH 16

int main(void) {
	DDRC = 0xFF; PORTC = 0x00;
 382:	87 b9       	out	0x07, r24	; 7
 384:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 386:	8a b9       	out	0x0a, r24	; 10
 388:	1b b8       	out	0x0b, r1	; 11
	unsigned char i;
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks) / sizeof(task*);

	task1.state = init;
 38a:	ed e2       	ldi	r30, 0x2D	; 45
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	10 82       	st	Z, r1
	task1.period = 350;
 390:	8e e5       	ldi	r24, 0x5E	; 94
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	a0 e0       	ldi	r26, 0x00	; 0
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	81 83       	std	Z+1, r24	; 0x01
 39a:	92 83       	std	Z+2, r25	; 0x02
 39c:	a3 83       	std	Z+3, r26	; 0x03
 39e:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task1.period;
 3a0:	85 83       	std	Z+5, r24	; 0x05
 3a2:	96 83       	std	Z+6, r25	; 0x06
 3a4:	a7 83       	std	Z+7, r26	; 0x07
 3a6:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &displayMessage;
 3a8:	84 e1       	ldi	r24, 0x14	; 20
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	92 87       	std	Z+10, r25	; 0x0a
 3ae:	81 87       	std	Z+9, r24	; 0x09
	unsigned long GCD = tasks[0]->period;
	for (i = 1; i < numTasks; ++i) {
		GCD = findGCD(GCD, tasks[i]->period);
	}

	LCD_init();
 3b0:	23 df       	rcall	.-442    	; 0x1f8 <LCD_init>

	TimerSet(GCD);
 3b2:	6e e5       	ldi	r22, 0x5E	; 94
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 3ba:	86 de       	rcall	.-756    	; 0xc8 <TimerSet>
 3bc:	96 de       	rcall	.-724    	; 0xea <TimerOn>

	while(1) {


		for (i = 0; i < numTasks; i++) {
			if (tasks[i]->elapsedTime == tasks[i]->period) {
 3be:	cd e2       	ldi	r28, 0x2D	; 45
 3c0:	d1 e0       	ldi	r29, 0x01	; 1
 3c2:	4d 81       	ldd	r20, Y+5	; 0x05
 3c4:	5e 81       	ldd	r21, Y+6	; 0x06
 3c6:	6f 81       	ldd	r22, Y+7	; 0x07
 3c8:	78 85       	ldd	r23, Y+8	; 0x08
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	ab 81       	ldd	r26, Y+3	; 0x03
 3d0:	bc 81       	ldd	r27, Y+4	; 0x04
 3d2:	48 17       	cp	r20, r24
 3d4:	59 07       	cpc	r21, r25
 3d6:	6a 07       	cpc	r22, r26
 3d8:	7b 07       	cpc	r23, r27
 3da:	61 f4       	brne	.+24     	; 0x3f4 <main+0x74>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3dc:	88 81       	ld	r24, Y
 3de:	e9 85       	ldd	r30, Y+9	; 0x09
 3e0:	fa 85       	ldd	r31, Y+10	; 0x0a
 3e2:	08 2e       	mov	r0, r24
 3e4:	00 0c       	add	r0, r0
 3e6:	99 0b       	sbc	r25, r25
 3e8:	09 95       	icall
 3ea:	88 83       	st	Y, r24
				tasks[i]->elapsedTime = 0;
 3ec:	1d 82       	std	Y+5, r1	; 0x05
 3ee:	1e 82       	std	Y+6, r1	; 0x06
 3f0:	1f 82       	std	Y+7, r1	; 0x07
 3f2:	18 86       	std	Y+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += GCD;
 3f4:	8d 81       	ldd	r24, Y+5	; 0x05
 3f6:	9e 81       	ldd	r25, Y+6	; 0x06
 3f8:	af 81       	ldd	r26, Y+7	; 0x07
 3fa:	b8 85       	ldd	r27, Y+8	; 0x08
 3fc:	82 5a       	subi	r24, 0xA2	; 162
 3fe:	9e 4f       	sbci	r25, 0xFE	; 254
 400:	af 4f       	sbci	r26, 0xFF	; 255
 402:	bf 4f       	sbci	r27, 0xFF	; 255
 404:	8d 83       	std	Y+5, r24	; 0x05
 406:	9e 83       	std	Y+6, r25	; 0x06
 408:	af 83       	std	Y+7, r26	; 0x07
 40a:	b8 87       	std	Y+8, r27	; 0x08
		}
		while(!TimerFlag);
 40c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <TimerFlag>
 410:	88 23       	and	r24, r24
 412:	e1 f3       	breq	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		TimerFlag = 0;
 414:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <TimerFlag>
	}
 418:	d4 cf       	rjmp	.-88     	; 0x3c2 <main+0x42>

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
