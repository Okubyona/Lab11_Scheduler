
Lab11_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005e6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800104  00800104  0000067e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e80  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a09  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000794  00000000  00000000  00002029  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b5  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067a  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000035a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	78 c1       	rjmp	.+752    	; 0x326 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	26 01       	movw	r4, r12
  8e:	58 01       	movw	r10, r16
  90:	58 01       	movw	r10, r16
  92:	58 01       	movw	r10, r16
  94:	58 01       	movw	r10, r16
  96:	58 01       	movw	r10, r16
  98:	58 01       	movw	r10, r16
  9a:	58 01       	movw	r10, r16
  9c:	58 01       	movw	r10, r16
  9e:	58 01       	movw	r10, r16
  a0:	58 01       	movw	r10, r16
  a2:	58 01       	movw	r10, r16
  a4:	58 01       	movw	r10, r16
  a6:	58 01       	movw	r10, r16
  a8:	58 01       	movw	r10, r16
  aa:	58 01       	movw	r10, r16
  ac:	58 01       	movw	r10, r16
  ae:	58 01       	movw	r10, r16
  b0:	58 01       	movw	r10, r16
  b2:	58 01       	movw	r10, r16
  b4:	58 01       	movw	r10, r16
  b6:	58 01       	movw	r10, r16
  b8:	58 01       	movw	r10, r16
  ba:	58 01       	movw	r10, r16
  bc:	58 01       	movw	r10, r16
  be:	58 01       	movw	r10, r16
  c0:	58 01       	movw	r10, r16
  c2:	58 01       	movw	r10, r16
  c4:	58 01       	movw	r10, r16
  c6:	58 01       	movw	r10, r16
  c8:	58 01       	movw	r10, r16
  ca:	58 01       	movw	r10, r16
  cc:	58 01       	movw	r10, r16
  ce:	58 01       	movw	r10, r16
  d0:	58 01       	movw	r10, r16
  d2:	55 01       	movw	r10, r10
  d4:	58 01       	movw	r10, r16
  d6:	58 01       	movw	r10, r16
  d8:	58 01       	movw	r10, r16
  da:	58 01       	movw	r10, r16
  dc:	58 01       	movw	r10, r16
  de:	58 01       	movw	r10, r16
  e0:	50 01       	movw	r10, r0
  e2:	58 01       	movw	r10, r16
  e4:	58 01       	movw	r10, r16
  e6:	58 01       	movw	r10, r16
  e8:	58 01       	movw	r10, r16
  ea:	58 01       	movw	r10, r16
  ec:	53 01       	movw	r10, r6
  ee:	29 01       	movw	r4, r18
  f0:	2c 01       	movw	r4, r24
  f2:	2f 01       	movw	r4, r30
  f4:	32 01       	movw	r6, r4
  f6:	35 01       	movw	r6, r10
  f8:	38 01       	movw	r6, r16
  fa:	3b 01       	movw	r6, r22
  fc:	3e 01       	movw	r6, r28
  fe:	41 01       	movw	r8, r2
 100:	58 01       	movw	r10, r16
 102:	58 01       	movw	r10, r16
 104:	58 01       	movw	r10, r16
 106:	58 01       	movw	r10, r16
 108:	58 01       	movw	r10, r16
 10a:	58 01       	movw	r10, r16
 10c:	58 01       	movw	r10, r16
 10e:	44 01       	movw	r8, r8
 110:	47 01       	movw	r8, r14
 112:	4a 01       	movw	r8, r20
 114:	4d 01       	movw	r8, r26

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e6 ee       	ldi	r30, 0xE6	; 230
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a0 32       	cpi	r26, 0x20	; 32
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	73 d1       	rcall	.+742    	; 0x434 <main>
 14e:	49 c2       	rjmp	.+1170   	; 0x5e2 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <GetKeypadKey>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 152:	8f ee       	ldi	r24, 0xEF	; 239
 154:	82 b9       	out	0x02, r24	; 2
 156:	00 00       	nop
 158:	00 9b       	sbis	0x00, 0	; 0
 15a:	29 c0       	rjmp	.+82     	; 0x1ae <GetKeypadKey+0x5c>
 15c:	01 9b       	sbis	0x00, 1	; 0
 15e:	29 c0       	rjmp	.+82     	; 0x1b2 <GetKeypadKey+0x60>
 160:	02 9b       	sbis	0x00, 2	; 0
 162:	29 c0       	rjmp	.+82     	; 0x1b6 <GetKeypadKey+0x64>
 164:	03 9b       	sbis	0x00, 3	; 0
 166:	29 c0       	rjmp	.+82     	; 0x1ba <GetKeypadKey+0x68>
 168:	8f ed       	ldi	r24, 0xDF	; 223
 16a:	82 b9       	out	0x02, r24	; 2
 16c:	00 00       	nop
 16e:	00 9b       	sbis	0x00, 0	; 0
 170:	26 c0       	rjmp	.+76     	; 0x1be <GetKeypadKey+0x6c>
 172:	01 9b       	sbis	0x00, 1	; 0
 174:	26 c0       	rjmp	.+76     	; 0x1c2 <GetKeypadKey+0x70>
 176:	02 9b       	sbis	0x00, 2	; 0
 178:	26 c0       	rjmp	.+76     	; 0x1c6 <GetKeypadKey+0x74>
 17a:	03 9b       	sbis	0x00, 3	; 0
 17c:	26 c0       	rjmp	.+76     	; 0x1ca <GetKeypadKey+0x78>
 17e:	8f eb       	ldi	r24, 0xBF	; 191
 180:	82 b9       	out	0x02, r24	; 2
 182:	00 00       	nop
 184:	00 9b       	sbis	0x00, 0	; 0
 186:	23 c0       	rjmp	.+70     	; 0x1ce <GetKeypadKey+0x7c>
 188:	01 9b       	sbis	0x00, 1	; 0
 18a:	23 c0       	rjmp	.+70     	; 0x1d2 <GetKeypadKey+0x80>
 18c:	02 9b       	sbis	0x00, 2	; 0
 18e:	23 c0       	rjmp	.+70     	; 0x1d6 <GetKeypadKey+0x84>
 190:	03 9b       	sbis	0x00, 3	; 0
 192:	23 c0       	rjmp	.+70     	; 0x1da <GetKeypadKey+0x88>
 194:	8f e7       	ldi	r24, 0x7F	; 127
 196:	82 b9       	out	0x02, r24	; 2
 198:	00 00       	nop
 19a:	00 9b       	sbis	0x00, 0	; 0
 19c:	20 c0       	rjmp	.+64     	; 0x1de <GetKeypadKey+0x8c>
 19e:	01 9b       	sbis	0x00, 1	; 0
 1a0:	20 c0       	rjmp	.+64     	; 0x1e2 <GetKeypadKey+0x90>
 1a2:	02 9b       	sbis	0x00, 2	; 0
 1a4:	20 c0       	rjmp	.+64     	; 0x1e6 <GetKeypadKey+0x94>
 1a6:	03 9b       	sbis	0x00, 3	; 0
 1a8:	20 c0       	rjmp	.+64     	; 0x1ea <GetKeypadKey+0x98>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	81 e3       	ldi	r24, 0x31	; 49
 1b0:	08 95       	ret
 1b2:	84 e3       	ldi	r24, 0x34	; 52
 1b4:	08 95       	ret
 1b6:	87 e3       	ldi	r24, 0x37	; 55
 1b8:	08 95       	ret
 1ba:	8a e2       	ldi	r24, 0x2A	; 42
 1bc:	08 95       	ret
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	08 95       	ret
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	08 95       	ret
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	08 95       	ret
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	08 95       	ret
 1ce:	83 e3       	ldi	r24, 0x33	; 51
 1d0:	08 95       	ret
 1d2:	86 e3       	ldi	r24, 0x36	; 54
 1d4:	08 95       	ret
 1d6:	89 e3       	ldi	r24, 0x39	; 57
 1d8:	08 95       	ret
 1da:	83 e2       	ldi	r24, 0x23	; 35
 1dc:	08 95       	ret
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	08 95       	ret
 1e2:	82 e4       	ldi	r24, 0x42	; 66
 1e4:	08 95       	ret
 1e6:	83 e4       	ldi	r24, 0x43	; 67
 1e8:	08 95       	ret
 1ea:	84 e4       	ldi	r24, 0x44	; 68
 1ec:	08 95       	ret

000001ee <keypadTick>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	ae df       	rcall	.-164    	; 0x152 <GetKeypadKey>
 1f6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x>
 1fa:	20 97       	sbiw	r28, 0x00	; 0
 1fc:	19 f0       	breq	.+6      	; 0x204 <keypadTick+0x16>
 1fe:	21 97       	sbiw	r28, 0x01	; 1
 200:	49 f0       	breq	.+18     	; 0x214 <keypadTick+0x26>
 202:	10 c0       	rjmp	.+32     	; 0x224 <keypadTick+0x36>
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	81 11       	cpse	r24, r1
 20a:	01 c0       	rjmp	.+2      	; 0x20e <keypadTick+0x20>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	29 2f       	mov	r18, r25
 210:	34 2f       	mov	r19, r20
 212:	0a c0       	rjmp	.+20     	; 0x228 <keypadTick+0x3a>
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	81 11       	cpse	r24, r1
 21a:	01 c0       	rjmp	.+2      	; 0x21e <keypadTick+0x30>
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	29 2f       	mov	r18, r25
 220:	34 2f       	mov	r19, r20
 222:	02 c0       	rjmp	.+4      	; 0x228 <keypadTick+0x3a>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	21 15       	cp	r18, r1
 22a:	31 05       	cpc	r19, r1
 22c:	21 f0       	breq	.+8      	; 0x236 <keypadTick+0x48>
 22e:	21 30       	cpi	r18, 0x01	; 1
 230:	31 05       	cpc	r19, r1
 232:	21 f0       	breq	.+8      	; 0x23c <keypadTick+0x4e>
 234:	3f c0       	rjmp	.+126    	; 0x2b4 <keypadTick+0xc6>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	85 b9       	out	0x05, r24	; 5
 23a:	3c c0       	rjmp	.+120    	; 0x2b4 <keypadTick+0xc6>
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	85 34       	cpi	r24, 0x45	; 69
 240:	91 05       	cpc	r25, r1
 242:	b0 f5       	brcc	.+108    	; 0x2b0 <keypadTick+0xc2>
 244:	fc 01       	movw	r30, r24
 246:	ea 5b       	subi	r30, 0xBA	; 186
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	c2 c1       	rjmp	.+900    	; 0x5d0 <__tablejump2__>
 24c:	8f e1       	ldi	r24, 0x1F	; 31
 24e:	85 b9       	out	0x05, r24	; 5
 250:	31 c0       	rjmp	.+98     	; 0x2b4 <keypadTick+0xc6>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	85 b9       	out	0x05, r24	; 5
 256:	2e c0       	rjmp	.+92     	; 0x2b4 <keypadTick+0xc6>
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	2b c0       	rjmp	.+86     	; 0x2b4 <keypadTick+0xc6>
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	85 b9       	out	0x05, r24	; 5
 262:	28 c0       	rjmp	.+80     	; 0x2b4 <keypadTick+0xc6>
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	85 b9       	out	0x05, r24	; 5
 268:	25 c0       	rjmp	.+74     	; 0x2b4 <keypadTick+0xc6>
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	22 c0       	rjmp	.+68     	; 0x2b4 <keypadTick+0xc6>
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	85 b9       	out	0x05, r24	; 5
 274:	1f c0       	rjmp	.+62     	; 0x2b4 <keypadTick+0xc6>
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	85 b9       	out	0x05, r24	; 5
 27a:	1c c0       	rjmp	.+56     	; 0x2b4 <keypadTick+0xc6>
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	85 b9       	out	0x05, r24	; 5
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <keypadTick+0xc6>
 282:	89 e0       	ldi	r24, 0x09	; 9
 284:	85 b9       	out	0x05, r24	; 5
 286:	16 c0       	rjmp	.+44     	; 0x2b4 <keypadTick+0xc6>
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	13 c0       	rjmp	.+38     	; 0x2b4 <keypadTick+0xc6>
 28e:	8b e0       	ldi	r24, 0x0B	; 11
 290:	85 b9       	out	0x05, r24	; 5
 292:	10 c0       	rjmp	.+32     	; 0x2b4 <keypadTick+0xc6>
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	85 b9       	out	0x05, r24	; 5
 298:	0d c0       	rjmp	.+26     	; 0x2b4 <keypadTick+0xc6>
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	85 b9       	out	0x05, r24	; 5
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <keypadTick+0xc6>
 2a0:	8e e0       	ldi	r24, 0x0E	; 14
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <keypadTick+0xc6>
 2a6:	15 b8       	out	0x05, r1	; 5
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <keypadTick+0xc6>
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <keypadTick+0xc6>
 2b0:	8b e1       	ldi	r24, 0x1B	; 27
 2b2:	85 b9       	out	0x05, r24	; 5
 2b4:	c9 01       	movw	r24, r18
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <TimerSet>:
 2bc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2cc:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <_avr_timer_cntcurr>
 2d0:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <_avr_timer_cntcurr+0x1>
 2d4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_avr_timer_cntcurr+0x2>
 2d8:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <_avr_timer_cntcurr+0x3>
 2dc:	08 95       	ret

000002de <TimerOn>:
 2de:	8b e0       	ldi	r24, 0x0B	; 11
 2e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2e4:	8d e7       	ldi	r24, 0x7D	; 125
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 302:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 306:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 30a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 30e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 312:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 316:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 31a:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 31e:	8f b7       	in	r24, 0x3f	; 63
 320:	80 68       	ori	r24, 0x80	; 128
 322:	8f bf       	out	0x3f, r24	; 63
 324:	08 95       	ret

00000326 <__vector_13>:
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_avr_timer_cntcurr>
 33c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <_avr_timer_cntcurr+0x1>
 340:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x2>
 344:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x3>
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	a1 09       	sbc	r26, r1
 34c:	b1 09       	sbc	r27, r1
 34e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 352:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 356:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 35a:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 35e:	89 2b       	or	r24, r25
 360:	8a 2b       	or	r24, r26
 362:	8b 2b       	or	r24, r27
 364:	99 f4       	brne	.+38     	; 0x38c <__vector_13+0x66>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <TimerFlag>
 36c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 370:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 374:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 378:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 37c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <_avr_timer_cntcurr>
 380:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <_avr_timer_cntcurr+0x1>
 384:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <_avr_timer_cntcurr+0x2>
 388:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <_avr_timer_cntcurr+0x3>
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <delay_ms>:
 39e:	18 16       	cp	r1, r24
 3a0:	19 06       	cpc	r1, r25
 3a2:	5c f0       	brlt	.+22     	; 0x3ba <delay_ms+0x1c>
 3a4:	08 95       	ret
 3a6:	00 00       	nop
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	31 09       	sbc	r19, r1
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <delay_ms+0x8>
 3ae:	4f 5f       	subi	r20, 0xFF	; 255
 3b0:	5f 4f       	sbci	r21, 0xFF	; 255
 3b2:	84 17       	cp	r24, r20
 3b4:	95 07       	cpc	r25, r21
 3b6:	19 f4       	brne	.+6      	; 0x3be <delay_ms+0x20>
 3b8:	08 95       	ret
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	27 e0       	ldi	r18, 0x07	; 7
 3c0:	33 e0       	ldi	r19, 0x03	; 3
 3c2:	f1 cf       	rjmp	.-30     	; 0x3a6 <delay_ms+0x8>

000003c4 <LCD_WriteCommand>:
 3c4:	5e 98       	cbi	0x0b, 6	; 11
 3c6:	88 b9       	out	0x08, r24	; 8
 3c8:	5f 9a       	sbi	0x0b, 7	; 11
 3ca:	00 00       	nop
 3cc:	5f 98       	cbi	0x0b, 7	; 11
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	e5 cf       	rjmp	.-54     	; 0x39e <delay_ms>
 3d4:	08 95       	ret

000003d6 <LCD_Cursor>:
 3d6:	81 31       	cpi	r24, 0x11	; 17
 3d8:	18 f4       	brcc	.+6      	; 0x3e0 <LCD_Cursor+0xa>
 3da:	81 58       	subi	r24, 0x81	; 129
 3dc:	f3 cf       	rjmp	.-26     	; 0x3c4 <LCD_WriteCommand>
 3de:	08 95       	ret
 3e0:	81 55       	subi	r24, 0x51	; 81
 3e2:	f0 cf       	rjmp	.-32     	; 0x3c4 <LCD_WriteCommand>
 3e4:	08 95       	ret

000003e6 <LCD_init>:
 3e6:	84 e6       	ldi	r24, 0x64	; 100
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	d9 df       	rcall	.-78     	; 0x39e <delay_ms>
 3ec:	88 e3       	ldi	r24, 0x38	; 56
 3ee:	ea df       	rcall	.-44     	; 0x3c4 <LCD_WriteCommand>
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	e8 df       	rcall	.-48     	; 0x3c4 <LCD_WriteCommand>
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	e6 df       	rcall	.-52     	; 0x3c4 <LCD_WriteCommand>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	e4 df       	rcall	.-56     	; 0x3c4 <LCD_WriteCommand>
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	ce cf       	rjmp	.-100    	; 0x39e <delay_ms>
 402:	08 95       	ret

00000404 <LCD_WriteData>:
 404:	5e 9a       	sbi	0x0b, 6	; 11
 406:	88 b9       	out	0x08, r24	; 8
 408:	5f 9a       	sbi	0x0b, 7	; 11
 40a:	00 00       	nop
 40c:	5f 98       	cbi	0x0b, 7	; 11
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	c5 cf       	rjmp	.-118    	; 0x39e <delay_ms>
 414:	08 95       	ret

00000416 <displayTick>:

	return state;
}


int displayTick(int state) {
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
	
	switch (state) {
 41c:	89 2b       	or	r24, r25
 41e:	31 f4       	brne	.+12     	; 0x42c <displayTick+0x16>
		case dispChar:
			LCD_Cursor(1);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	d9 df       	rcall	.-78     	; 0x3d6 <LCD_Cursor>
			if (x != '\0') {
 424:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <x>
				LCD_WriteData(x);
 428:	81 11       	cpse	r24, r1
 42a:	ec df       	rcall	.-40     	; 0x404 <LCD_WriteData>
			}
			break;

	}
	return state;
}
 42c:	ce 01       	movw	r24, r28
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <main>:
int keypadTick(int state);
int displayTick( int state);

#define SCREEN_WIDTH 16

int main(void) {
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	00 d0       	rcall	.+0      	; 0x43a <main+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <main+0x8>
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xF0; PORTA = 0x0F;
 440:	80 ef       	ldi	r24, 0xF0	; 240
 442:	81 b9       	out	0x01, r24	; 1
 444:	8f e0       	ldi	r24, 0x0F	; 15
 446:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	84 b9       	out	0x04, r24	; 4
 44c:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 44e:	87 b9       	out	0x07, r24	; 7
 450:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 452:	8a b9       	out	0x0a, r24	; 10
 454:	1b b8       	out	0x0b, r1	; 11

	unsigned char i;
	static task task1, task2;
	task *tasks[] = { &task1, &task2};
 456:	af e0       	ldi	r26, 0x0F	; 15
 458:	b1 e0       	ldi	r27, 0x01	; 1
 45a:	ba 83       	std	Y+2, r27	; 0x02
 45c:	a9 83       	std	Y+1, r26	; 0x01
 45e:	e4 e0       	ldi	r30, 0x04	; 4
 460:	f1 e0       	ldi	r31, 0x01	; 1
 462:	fc 83       	std	Y+4, r31	; 0x04
 464:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks) / sizeof(task*);

	task1.state = wait;
 466:	1c 92       	st	X, r1
	task1.period = 50;
 468:	42 e3       	ldi	r20, 0x32	; 50
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	11 96       	adiw	r26, 0x01	; 1
 472:	4d 93       	st	X+, r20
 474:	5d 93       	st	X+, r21
 476:	6d 93       	st	X+, r22
 478:	7c 93       	st	X, r23
 47a:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = task2.period;
 47c:	01 81       	ldd	r16, Z+1	; 0x01
 47e:	12 81       	ldd	r17, Z+2	; 0x02
 480:	23 81       	ldd	r18, Z+3	; 0x03
 482:	34 81       	ldd	r19, Z+4	; 0x04
 484:	15 96       	adiw	r26, 0x05	; 5
 486:	0d 93       	st	X+, r16
 488:	1d 93       	st	X+, r17
 48a:	2d 93       	st	X+, r18
 48c:	3c 93       	st	X, r19
 48e:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &keypadTick;
 490:	87 ef       	ldi	r24, 0xF7	; 247
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	1a 96       	adiw	r26, 0x0a	; 10
 496:	9c 93       	st	X, r25
 498:	8e 93       	st	-X, r24
 49a:	19 97       	sbiw	r26, 0x09	; 9

	task2.state = dispChar;
 49c:	10 82       	st	Z, r1
	task2.period = 100;
 49e:	84 e6       	ldi	r24, 0x64	; 100
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	a0 e0       	ldi	r26, 0x00	; 0
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	81 83       	std	Z+1, r24	; 0x01
 4a8:	92 83       	std	Z+2, r25	; 0x02
 4aa:	a3 83       	std	Z+3, r26	; 0x03
 4ac:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = task1.period;
 4ae:	45 83       	std	Z+5, r20	; 0x05
 4b0:	56 83       	std	Z+6, r21	; 0x06
 4b2:	67 83       	std	Z+7, r22	; 0x07
 4b4:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &displayTick;
 4b6:	8b e0       	ldi	r24, 0x0B	; 11
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	92 87       	std	Z+10, r25	; 0x0a
 4bc:	81 87       	std	Z+9, r24	; 0x09
 4be:	0f 2e       	mov	r0, r31
 4c0:	f4 e6       	ldi	r31, 0x64	; 100
 4c2:	8f 2e       	mov	r8, r31
 4c4:	91 2c       	mov	r9, r1
 4c6:	a1 2c       	mov	r10, r1
 4c8:	b1 2c       	mov	r11, r1
 4ca:	f0 2d       	mov	r31, r0
 4cc:	52 e3       	ldi	r21, 0x32	; 50
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <main+0xa6>
    unsigned long int c;
    while(1) {
        c = a % b;
        if (c == 0) { return b; }
        a = b;
        b = c;
 4d6:	4b 01       	movw	r8, r22
 4d8:	5c 01       	movw	r10, r24
#define TASKS_H

unsigned long int findGCD(unsigned long int a, unsigned long b) {
    unsigned long int c;
    while(1) {
        c = a % b;
 4da:	65 2f       	mov	r22, r21
 4dc:	74 2f       	mov	r23, r20
 4de:	83 2f       	mov	r24, r19
 4e0:	92 2f       	mov	r25, r18
 4e2:	a5 01       	movw	r20, r10
 4e4:	94 01       	movw	r18, r8
 4e6:	52 d0       	rcall	.+164    	; 0x58c <__udivmodsi4>
 4e8:	58 2d       	mov	r21, r8
 4ea:	49 2d       	mov	r20, r9
 4ec:	3a 2d       	mov	r19, r10
 4ee:	2b 2d       	mov	r18, r11
        if (c == 0) { return b; }
 4f0:	61 15       	cp	r22, r1
 4f2:	71 05       	cpc	r23, r1
 4f4:	81 05       	cpc	r24, r1
 4f6:	91 05       	cpc	r25, r1
	unsigned long GCD = tasks[0]->period;
	for (i = 1; i < numTasks; ++i) {
		GCD = findGCD(GCD, tasks[i]->period);
	}

	LCD_init();
 4f8:	71 f7       	brne	.-36     	; 0x4d6 <main+0xa2>
 4fa:	75 df       	rcall	.-278    	; 0x3e6 <LCD_init>

	TimerSet(GCD);
 4fc:	c5 01       	movw	r24, r10
 4fe:	b4 01       	movw	r22, r8
	TimerOn();
 500:	dd de       	rcall	.-582    	; 0x2bc <TimerSet>
 502:	ed de       	rcall	.-550    	; 0x2de <TimerOn>
 504:	7e 01       	movw	r14, r28
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	e8 0e       	add	r14, r24
 50a:	f1 1c       	adc	r15, r1
 50c:	de 01       	movw	r26, r28
 50e:	11 96       	adiw	r26, 0x01	; 1
 510:	6d 01       	movw	r12, r26

	while(1) {
		for (i = 0; i < numTasks; i++) {
			if (tasks[i]->elapsedTime == tasks[i]->period) {
 512:	f6 01       	movw	r30, r12
 514:	01 91       	ld	r16, Z+
 516:	11 91       	ld	r17, Z+
 518:	6f 01       	movw	r12, r30
 51a:	d8 01       	movw	r26, r16
 51c:	15 96       	adiw	r26, 0x05	; 5
 51e:	4d 91       	ld	r20, X+
 520:	5d 91       	ld	r21, X+
 522:	6d 91       	ld	r22, X+
 524:	7c 91       	ld	r23, X
 526:	18 97       	sbiw	r26, 0x08	; 8
 528:	11 96       	adiw	r26, 0x01	; 1
 52a:	8d 91       	ld	r24, X+
 52c:	9d 91       	ld	r25, X+
 52e:	0d 90       	ld	r0, X+
 530:	bc 91       	ld	r27, X
 532:	a0 2d       	mov	r26, r0
 534:	48 17       	cp	r20, r24
 536:	59 07       	cpc	r21, r25
 538:	6a 07       	cpc	r22, r26
 53a:	7b 07       	cpc	r23, r27
 53c:	81 f4       	brne	.+32     	; 0x55e <main+0x12a>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 53e:	f8 01       	movw	r30, r16
 540:	80 81       	ld	r24, Z
 542:	01 84       	ldd	r0, Z+9	; 0x09
 544:	f2 85       	ldd	r31, Z+10	; 0x0a
 546:	e0 2d       	mov	r30, r0
 548:	08 2e       	mov	r0, r24
 54a:	00 0c       	add	r0, r0
 54c:	99 0b       	sbc	r25, r25
 54e:	09 95       	icall
 550:	d8 01       	movw	r26, r16
 552:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 554:	f8 01       	movw	r30, r16
 556:	15 82       	std	Z+5, r1	; 0x05
 558:	16 82       	std	Z+6, r1	; 0x06
 55a:	17 82       	std	Z+7, r1	; 0x07
 55c:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += GCD;
 55e:	f8 01       	movw	r30, r16
 560:	85 81       	ldd	r24, Z+5	; 0x05
 562:	96 81       	ldd	r25, Z+6	; 0x06
 564:	a7 81       	ldd	r26, Z+7	; 0x07
 566:	b0 85       	ldd	r27, Z+8	; 0x08
 568:	88 0d       	add	r24, r8
 56a:	99 1d       	adc	r25, r9
 56c:	aa 1d       	adc	r26, r10
 56e:	bb 1d       	adc	r27, r11
 570:	85 83       	std	Z+5, r24	; 0x05
 572:	96 83       	std	Z+6, r25	; 0x06
 574:	a7 83       	std	Z+7, r26	; 0x07
 576:	b0 87       	std	Z+8, r27	; 0x08

	TimerSet(GCD);
	TimerOn();

	while(1) {
		for (i = 0; i < numTasks; i++) {
 578:	ec 14       	cp	r14, r12
 57a:	fd 04       	cpc	r15, r13
 57c:	51 f6       	brne	.-108    	; 0x512 <main+0xde>
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += GCD;
		}
		while(!TimerFlag);
 57e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <TimerFlag>
 582:	88 23       	and	r24, r24
 584:	e1 f3       	breq	.-8      	; 0x57e <main+0x14a>
		TimerFlag = 0;
 586:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <TimerFlag>
	}
 58a:	c0 cf       	rjmp	.-128    	; 0x50c <main+0xd8>

0000058c <__udivmodsi4>:
 58c:	a1 e2       	ldi	r26, 0x21	; 33
 58e:	1a 2e       	mov	r1, r26
 590:	aa 1b       	sub	r26, r26
 592:	bb 1b       	sub	r27, r27
 594:	fd 01       	movw	r30, r26
 596:	0d c0       	rjmp	.+26     	; 0x5b2 <__udivmodsi4_ep>

00000598 <__udivmodsi4_loop>:
 598:	aa 1f       	adc	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	ee 1f       	adc	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	a2 17       	cp	r26, r18
 5a2:	b3 07       	cpc	r27, r19
 5a4:	e4 07       	cpc	r30, r20
 5a6:	f5 07       	cpc	r31, r21
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__udivmodsi4_ep>
 5aa:	a2 1b       	sub	r26, r18
 5ac:	b3 0b       	sbc	r27, r19
 5ae:	e4 0b       	sbc	r30, r20
 5b0:	f5 0b       	sbc	r31, r21

000005b2 <__udivmodsi4_ep>:
 5b2:	66 1f       	adc	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a 94       	dec	r1
 5bc:	69 f7       	brne	.-38     	; 0x598 <__udivmodsi4_loop>
 5be:	60 95       	com	r22
 5c0:	70 95       	com	r23
 5c2:	80 95       	com	r24
 5c4:	90 95       	com	r25
 5c6:	9b 01       	movw	r18, r22
 5c8:	ac 01       	movw	r20, r24
 5ca:	bd 01       	movw	r22, r26
 5cc:	cf 01       	movw	r24, r30
 5ce:	08 95       	ret

000005d0 <__tablejump2__>:
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	00 24       	eor	r0, r0
 5d6:	00 1c       	adc	r0, r0
 5d8:	0b be       	out	0x3b, r0	; 59
 5da:	07 90       	elpm	r0, Z+
 5dc:	f6 91       	elpm	r31, Z
 5de:	e0 2d       	mov	r30, r0
 5e0:	09 94       	ijmp

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
